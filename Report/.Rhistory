german.ct <- rpart(RESPONSE ~ ., method = "exp", data = German_credit.tr )
german.ct <- rpart(RESPONSE ~ ., method = "class", data = German_credit.tr )
summary(german.ct)
par(pty = "s", mar = c(1, 1, 1, 1))
plot(german.ct, cex = 1)
text(german.ct, cex = 0.6)
rpart.plot(german.ct)
# training set
German_credit.tr <- German_credit_cleaned[index.tr,-1]
# test set
German_credit.te <- German_credit_cleaned[-index.tr,-1]
View(German_credit.te)
german.ct <- rpart(RESPONSE ~ ., method = "class", data = German_credit.tr )
summary(german.ct)
par(pty = "s", mar = c(1, 1, 1, 1))
plot(german.ct, cex = 1)
text(german.ct, cex = 0.6)
rpart.plot(german.ct)
# Logistic regression to see the significant variables (not working)
mod1 <- glm(RESPONSE~., data = German_credit_cleaned[, -1], family= binomial)
summary(mod1)
knitr::opts_chunk$set(echo = TRUE)
plotcp(german.ct)
knitr::opts_chunk$set(echo = TRUE)
German_credit_cleaned <- read.csv("./../Data_DA/GermanCredit_cleaned.csv", header = TRUE)
German_credit_cleaned$DURATION <- as.numeric(German_credit_cleaned$DURATION)
German_credit_cleaned$AMOUNT <- as.numeric(German_credit_cleaned$AMOUNT)
German_credit_cleaned$INSTALL_RATE <- as.numeric(German_credit_cleaned$INSTALL_RATE)
German_credit_cleaned$AGE <- as.numeric(German_credit_cleaned$AGE)
German_credit_cleaned$NUM_CREDITS <- as.numeric(German_credit_cleaned$NUM_CREDITS)
German_credit_cleaned$NUM_DEPENDENTS <- as.numeric(German_credit_cleaned$NUM_DEPENDENTS)
for (i in 1:ncol(German_credit_cleaned)){
if (class(German_credit_cleaned[,i])=="integer"){
German_credit_cleaned[,i] <- factor(German_credit_cleaned[,i])
}
}
str(German_credit_cleaned)
set.seed(1234)
# indexes of the training set observations
index.tr <- sample(x = 1:nrow(German_credit_cleaned), size= 3/4*nrow(German_credit_cleaned), replace=FALSE)
# training set
German_credit.tr <- German_credit_cleaned[index.tr,-1]
# test set
German_credit.te <- German_credit_cleaned[-index.tr,-1]
german.ct <- rpart(RESPONSE ~ ., method = "class", data = German_credit.tr )
source(here::here("scripts/setup.R"))
source(here::here("scripts/setup.R"))
German_credit_cleaned <- read.csv("./../Data_DA/GermanCredit_cleaned.csv", header = TRUE)
German_credit_cleaned$DURATION <- as.numeric(German_credit_cleaned$DURATION)
German_credit_cleaned$AMOUNT <- as.numeric(German_credit_cleaned$AMOUNT)
German_credit_cleaned$INSTALL_RATE <- as.numeric(German_credit_cleaned$INSTALL_RATE)
German_credit_cleaned$AGE <- as.numeric(German_credit_cleaned$AGE)
German_credit_cleaned$NUM_CREDITS <- as.numeric(German_credit_cleaned$NUM_CREDITS)
German_credit_cleaned$NUM_DEPENDENTS <- as.numeric(German_credit_cleaned$NUM_DEPENDENTS)
for (i in 1:ncol(German_credit_cleaned)){
if (class(German_credit_cleaned[,i])=="integer"){
German_credit_cleaned[,i] <- factor(German_credit_cleaned[,i])
}
}
str(German_credit_cleaned)
set.seed(1234)
# indexes of the training set observations
index.tr <- sample(x = 1:nrow(German_credit_cleaned), size= 3/4*nrow(German_credit_cleaned), replace=FALSE)
# training set
German_credit.tr <- German_credit_cleaned[index.tr,-1]
# test set
German_credit.te <- German_credit_cleaned[-index.tr,-1]
german.ct <- rpart(RESPONSE ~ ., method = "class", data = German_credit.tr )
summary(german.ct)
par(pty = "s", mar = c(1, 1, 1, 1))
plot(german.ct, cex = 1)
text(german.ct, cex = 0.6)
rpart.plot(german.ct)
plotcp(german.ct)
(0.052-0.016)
(0.052-0.016)/2
0.052-0.016
german.ct.prune <- prune(german.ct, cp=0.036)
rpart.plot(german.ct.prune)
german.ct.prune <- prune(german.ct, cp=0.029)
rpart.plot(german.ct.prune)
german.ct.prune <- prune(german.ct, cp=0.025)
rpart.plot(german.ct.prune)
german.ct.prune <- prune(german.ct, cp=0.029)
rpart.plot(german.ct.prune)
german.ct.prune <- prune(german.ct, cp=0.029)
rpart.plot(german.ct.prune)
german.ct.prune <- prune(german.ct, cp=0.029)
rpart.plot(german.ct.prune)
german.ct.prune <- prune(german.ct, cp=0.029)
rpart.plot(german.ct.prune)
set.seed(1234)
rpart.plot(autoprune(RESPONSE ~ ., method = "class", data = German_credit.tr))
library(adabag)
german.ct.prune <- prune(german.ct, cp=0.029)
rpart.plot(german.ct.prune)
set.seed(1234)
rpart.plot(autoprune(RESPONSE ~ ., method = "class", data = German_credit.tr))
set.seed(1234)
rpart.plot(autoprune(RESPONSE ~ ., method = "class", data = German_credit.tr))
german.ct.prediction <- predict(german.ct.prune, newdata=German_credit.te, type="class")
# Confusion Matrix
table(Pred=german.ct.prediction, Obs=German_credit.te$RESPONSE
View(German_credit.tr)
View(German_credit.te)
german.ct.prediction <- predict(german.ct.prune, newdata=German_credit.te, type="class")
# Confusion Matrix
table(Pred=german.ct.prediction, Obs=German_credit.te$RESPONSE)
knitr::opts_chunk$set(echo = TRUE)
source(here::here("scripts/setup.R"))
German_credit <- read.csv("./../Data_DA/GermanCredit.csv", header = TRUE, sep = ";")
str(German_credit)
summary(German_credit)
German_credit$EDUCATION[37] <- 1
German_credit$EDUCATION <- as.factor(German_credit$EDUCATION)
German_credit$GUARANTOR[234] <- 1
German_credit$GUARANTOR <- as.factor(German_credit$GUARANTOR)
German_credit$AGE[537] <- 75
which(is.na(German_credit))
German_credit$DURATION <- as.numeric(German_credit$DURATION)
German_credit$AMOUNT <- as.numeric(German_credit$AMOUNT)
German_credit$INSTALL_RATE <- as.numeric(German_credit$INSTALL_RATE)
German_credit$AGE <- as.numeric(German_credit$AGE)
German_credit$NUM_CREDITS <- as.numeric(German_credit$NUM_CREDITS)
German_credit$NUM_DEPENDENTS <- as.numeric(German_credit$NUM_DEPENDENTS)
for (i in 1:ncol(German_credit)){
if (class(German_credit[,i])=="integer"){
German_credit[,i] <- factor(German_credit[,i])
}
}
str(German_credit)
describe(German_credit)
introduce(German_credit)
plot_intro(German_credit)
plot_histogram(German_credit)
plot_density(German_credit)
plot_histogram(German_credit)
plot_density(German_credit)
German_credit.num <- German_credit %>%
select('DURATION', 'AMOUNT', 'INSTALL_RATE', 'AGE', 'NUM_CREDITS','NUM_DEPENDENTS')
German_credit.pca <- prcomp(German_credit.num, scale = TRUE)
summary(German_credit.pca)
German_credit.pca <- prcomp(German_credit.num, center = TRUE, scale = TRUE)
summary(German_credit.pca)
fviz_eig(German_credit.pca)
fviz_pca_ind(German_credit.pca,
col.ind = "cos2", # Colorer par le cos2
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_var(German_credit.pca,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_biplot(German_credit.pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969"
)
knitr::opts_chunk$set(echo = TRUE)
source(here::here("scripts/setup.R"))
German_credit_cleaned <- read.csv("./../Data_DA/GermanCredit_cleaned.csv", header = TRUE)
German_credit_cleaned$DURATION <- as.numeric(German_credit_cleaned$DURATION)
German_credit_cleaned$AMOUNT <- as.numeric(German_credit_cleaned$AMOUNT)
German_credit_cleaned$INSTALL_RATE <- as.numeric(German_credit_cleaned$INSTALL_RATE)
German_credit_cleaned$AGE <- as.numeric(German_credit_cleaned$AGE)
German_credit_cleaned$NUM_CREDITS <- as.numeric(German_credit_cleaned$NUM_CREDITS)
German_credit_cleaned$NUM_DEPENDENTS <- as.numeric(German_credit_cleaned$NUM_DEPENDENTS)
for (i in 1:ncol(German_credit_cleaned)){
if (class(German_credit_cleaned[,i])=="integer"){
German_credit_cleaned[,i] <- factor(German_credit_cleaned[,i])
}
}
str(German_credit_cleaned)
set.seed(1234)
# indexes of the training set observations
index.tr <- sample(x = 1:nrow(German_credit_cleaned), size= 3/4*nrow(German_credit_cleaned), replace=FALSE)
# training set
German_credit.tr <- German_credit_cleaned[index.tr,-1]
# test set
German_credit.te <- German_credit_cleaned[-index.tr,-1]
german.ct <- rpart(RESPONSE ~ ., method = "class", data = German_credit.tr )
summary(german.ct)
par(pty = "s", mar = c(1, 1, 1, 1))
plot(german.ct, cex = 1)
text(german.ct, cex = 0.6)
rpart.plot(german.ct)
plotcp(german.ct)
german.ct.prune <- prune(german.ct, cp=0.029)
rpart.plot(german.ct.prune)
set.seed(1234)
rpart.plot(autoprune(RESPONSE ~ ., method = "class", data = German_credit.tr))
set.seed(1234)
rpart.plot(autoprune(RESPONSE ~ ., method = "class", data = German_credit.tr))
german.ct.prediction <- predict(german.ct.prune, newdata=German_credit.te, type="class")
# Confusion Matrix
table(Pred=german.ct.prediction, Obs=German_credit.te$RESPONSE)
# Logistic regression to see the significant variables (not working)
mod1 <- glm(RESPONSE~., data = German_credit_cleaned[, -1], family= binomial)
summary(mod1)
knitr::opts_chunk$set(echo = TRUE)
source(here::here("scripts/setup.R"))
source("scripts/setup.R")
source("scripts/setup.R")
source("./scripts/setup.R")
source("../scripts/setup.R")
German_credit_cleaned <- read.csv("./../Data_DA/GermanCredit_cleaned.csv", header = TRUE)
German_credit_cleaned$DURATION <- as.numeric(German_credit_cleaned$DURATION)
German_credit_cleaned$AMOUNT <- as.numeric(German_credit_cleaned$AMOUNT)
German_credit_cleaned$INSTALL_RATE <- as.numeric(German_credit_cleaned$INSTALL_RATE)
German_credit_cleaned$AGE <- as.numeric(German_credit_cleaned$AGE)
German_credit_cleaned$NUM_CREDITS <- as.numeric(German_credit_cleaned$NUM_CREDITS)
German_credit_cleaned$NUM_DEPENDENTS <- as.numeric(German_credit_cleaned$NUM_DEPENDENTS)
for (i in 1:ncol(German_credit_cleaned)){
if (class(German_credit_cleaned[,i])=="integer"){
German_credit_cleaned[,i] <- factor(German_credit_cleaned[,i])
}
}
str(German_credit_cleaned)
set.seed(1234)
# indexes of the training set observations
index.tr <- sample(x = 1:nrow(German_credit_cleaned),
size= 3/4*nrow(German_credit_cleaned), replace=FALSE)
# training set
German_credit.tr <- German_credit_cleaned[index.tr,-1]
# test set
German_credit.te <- German_credit_cleaned[-index.tr,-1]
## Statistics on the training set
table(German_credit.tr$RESPONSE)
n.Bad_Credit <- min(table(German_credit.tr$RESPONSE)) ## 32
## the "0" cases
German_credit.tr.Bad_Credit <- filter(German_credit.tr, RESPONSE == 0)
## The "1" cases
German_credit.tr.Good_Credit <- filter(German_credit.tr, RESPONSE == 1)
## sub-sample 32 instances from the "Good Credit" by drawing indexes
index.no <- sample(size=n.Bad_Credit, x=1:nrow(German_credit.tr.Good_Credit), replace=FALSE)
## Bind all the "Bad" and the sub-sampled "Good"
German_Credit.tr.subs <- data.frame(rbind(German_credit.tr.Bad_Credit,
German_credit.tr.Good_Credit[index.no,]))
## The cases are balanced
table(German_Credit.tr.subs$RESPONSE)
Gradient_boost.y_train <- as.integer(German_Credit.tr.subs$RESPONSE)-1
Gradient_boost.y_test <- as.integer(German_credit.te$RESPONSE)-1
Gradient_boost.X_train <- sparse.model.matrix(RESPONSE ~ .-1,
data = German_Credit.tr.subs )
Gradient_boost.X_test <- sparse.model.matrix(RESPONSE ~ .-1,
data = German_credit.te )
xgb_train <- xgb.DMatrix(data = Gradient_boost.X_train,
label = Gradient_boost.y_train)
xgb_test <- xgb.DMatrix(data = Gradient_boost.X_test,
label = Gradient_boost.y_test)
xgb_params <- list(
booster = "gbtree",
eta = 0.01,
max_depth = 8,
gamma = 4,
subsample = 0.75,
colsample_bytree = 1,
objective = "multi:softmax",
eval_metric = "mlogloss",
num_class = 2
)
xgb_model <- xgb.train(
params = xgb_params,
data = xgb_train,
nrounds = 5000,
verbose = 1
)
xgb_model
xgb_preds <- predict(xgb_model, Gradient_boost.X_test, reshape = TRUE)
# confusion matrix
xgb_tab <- table(Obs=Gradient_boost.y_test, Pred=xgb_preds)
xgb_tab
# accuracy
(xgb_acc <- sum(diag(xgb_tab))/sum(xgb_tab))
confusionMatrix(data=xgb_preds,
reference = Gradient_boost.y_test)
confusionMatrix(data=xgb_preds,
reference = as.factor(Gradient_boost.y_test))
confusionMatrix(data=as.factor(xgb_preds),
reference = as.factor(Gradient_boost.y_test))
german.ct <- rpart(RESPONSE ~ ., method = "class", data = German_Credit.tr.subs )
summary(german.ct)
par(pty = "s", mar = c(1, 1, 1, 1))
plot(german.ct, cex = 1)
text(german.ct, cex = 0.6)
rpart.plot(german.ct)
View(German_credit_cleaned)
printcp(german.ct)
plotcp(german.ct)
german.ct.prune <- prune(german.ct, cp=0.022)
rpart.plot(german.ct.prune)
german.ct.prediction <- predict(german.ct.prune, newdata=German_credit.te, type="class")
# Confusion Matrix
confusionMatrix(data=german.ct.prediction, reference = German_credit.te$RESPONSE)
set.seed(1234)
german.ct.autoprune <- autoprune(RESPONSE ~ ., method = "class",
data = German_Credit.tr.subs)
rpart.plot(german.ct.autoprune )
german.ct.autoprune.prediction <- predict(german.ct.autoprune,
newdata=German_credit.te,
type="class")
# Confusion Matrix
confusionMatrix(data=german.ct.autoprune.prediction,
reference = German_credit.te$RESPONSE)
varImp(german.ct.prune)
vip(german.ct.prune)
**CHK_ACCT**, **AMOUNT**, **HISTORY**, **DURATION**, **GUARANTOR** and **EMPLOYMENT**
# Logistic regression to see the significant variables (not working)
logreg <- glm(RESPONSE~., data = German_Credit.tr.subs, family= binomial)
summary(logreg)
german.logrer.pred_prob <- predict(logreg, newdata = German_credit.te,
type="response")
german.logrer.pred <- ifelse(german.logrer.pred_prob >= 0.5, 1, 0)
# Confusion Matrix
confusionMatrix(data=as.factor(german.logrer.pred),
reference = German_credit.te$RESPONSE)
step(logreg) # see the result
mod.logreg.sel <- step(logreg) # store the final model into mod.lm.sel
summary(mod.logreg.sel)
summary(mod.logreg.sel)
x_train <- select(German_Credit.tr.subs, -RESPONSE)
y_train <- pull(German_Credit.tr.subs, RESPONSE)
explainer_logreg <- explain(model = logreg,
data = x_train,
y = as.numeric(y_train),
label = "Logistic Regression")
importance_logreg  <- calculate_importance(explainer_logreg)
plot(importance_logreg)
vip(logreg)
x_train <- select(German_Credit.tr.subs, -RESPONSE)
y_train <- pull(German_Credit.tr.subs, RESPONSE)
explainer_logreg <- explain(model = mod.logreg.sel,
data = x_train,
y = as.numeric(y_train),
label = "Logistic Regression")
importance_logreg  <- calculate_importance(explainer_logreg)
plot(importance_logreg)
vip(mod.logreg.sel)
German_credit.num.response <- German_credit_cleaned %>%
select('RESPONSE','DURATION', 'AMOUNT',
'INSTALL_RATE', 'AGE', 'NUM_CREDITS','NUM_DEPENDENTS')
## build the K-NN model with k = 2
German_credit.knn <- knn3(data=German_credit.num.response, RESPONSE~., k=2)
German_credit.knn.pred <- predict(German_credit.knn,
newdata = German_credit.num.response, type="class")
German_credit.knn.pred
## build the K-NN model with k = 2
German_credit.knn <- knn3(data=German_credit.num.response, RESPONSE~., k=2)
German_credit.knn.pred <- predict(German_credit.knn,
newdata = German_credit.num.response,
type="class")
# applying Knn model with k = 2 on the training set
German_credit.knn.tr <- knn3(data=German_credit.tr, RESPONSE~., k=2)
German_credit.knn.tr.pred <- predict(German_credit.knn.tr,
newdata = German_credit.te, type="class")
# applying Knn model with k = 2 on the training set
German_credit.knn.tr <- knn3(data=German_credit.tr, RESPONSE~., k=2)
German_credit.knn.tr.pred <- predict(German_credit.knn.tr,
newdata = German_credit.te, type="class")
table(Pred=German_credit.knn.tr.pred, Observed=German_credit.te$RESPONSE)
# Confusion Matrix
confusionMatrix(data=German_credit.knn.tr.pred,
reference = German_credit.te$RESPONSE)
# applying Knn model with k = 3 on the training set
German_credit.knn3.tr <- knn3(data=German_credit.tr, RESPONSE~., k=3)
German_credit.knn3.tr.pred <- predict(German_credit.knn3.tr,
newdata = German_credit.te, type="class")
table(Pred=German_credit.knn3.tr.pred, Observed=German_credit.te$RESPONSE)
# Confusion Matrix
confusionMatrix(data=German_credit.knn3.tr.pred,
reference = German_credit.te$RESPONSE)
set.seed(123)
## build the K-NN model with k = 2
German_credit.knn <- knn3(data=German_credit.num.response, RESPONSE~., k=2)
German_credit.knn.pred <- predict(German_credit.knn,
newdata = German_credit.num.response,
type="class")
set.seed(123)
# applying Knn model with k = 2 on the training set
German_credit.knn.tr <- knn3(data=German_credit.tr, RESPONSE~., k=2)
German_credit.knn.tr.pred <- predict(German_credit.knn.tr,
newdata = German_credit.te, type="class")
table(Pred=German_credit.knn.tr.pred, Observed=German_credit.te$RESPONSE)
# Confusion Matrix
confusionMatrix(data=German_credit.knn.tr.pred,
reference = German_credit.te$RESPONSE)
set.seed(123)
# applying Knn model with k = 3 on the training set
German_credit.knn3.tr <- knn3(data=German_credit.tr, RESPONSE~., k=3)
German_credit.knn3.tr.pred <- predict(German_credit.knn3.tr,
newdata = German_credit.te, type="class")
table(Pred=German_credit.knn3.tr.pred, Observed=German_credit.te$RESPONSE)
# Confusion Matrix
confusionMatrix(data=German_credit.knn3.tr.pred,
reference = German_credit.te$RESPONSE)
German_credit.svm <- svm(RESPONSE ~ ., data=German_Credit.tr.subs, kernel="linear")
German_credit.svm
German_credit.svm.pred <- predict(German_credit.svm, newdata = German_credit.te)
# confusion matrix
table(Pred=German_credit.svm.pred, obs=German_credit.te$RESPONSE)
confusionMatrix(data=German_credit.svm.pred, reference = German_credit.te$RESPONSE )
# Confusion Matrix
confusionMatrix(data=German_credit.knn3.tr.pred,
reference = German_credit.te$RESPONSE)
# Confusion Matrix
confusionMatrix(data=German_credit.knn3.tr.pred,
reference = German_credit.te$RESPONSE)
German_credit.svm <- svm(RESPONSE ~ ., data=German_Credit.tr.subs, kernel="linear")
German_credit.svm
German_credit.svm.pred <- predict(German_credit.svm, newdata = German_credit.te)
# confusion matrix
table(Pred=German_credit.svm.pred, obs=German_credit.te$RESPONSE)
roc_imp_linearSVM <- varImp(German_credit.svm, scale = FALSE)
roc_imp_linearSVM <- varImp(German_credit.svm)
vip(German_credit.svm)
#x_train <- select(German_Credit.tr.subs, -RESPONSE)
#y_train <- pull(German_Credit.tr.subs, RESPONSE)
explainer_logreg <- explain(model = German_credit.svm,
data = x_train,
y = as.numeric(y_train),
label = "Linear SVM")
importance_logreg  <- calculate_importance(explainer_logreg)
#x_train <- select(German_Credit.tr.subs, -RESPONSE)
#y_train <- pull(German_Credit.tr.subs, RESPONSE)
explainer_logreg <- explain(model = German_credit.svm,
data = x_train,
y = as.numeric(y_train),
label = "Linear SVM")
importance_logreg  <- calculate_importance(explainer_logreg)
German_credit.svm$SV
summary(xgb_model)
Gradient_boost.y_train <- as.integer(German_Credit.tr.subs$RESPONSE)-1
Gradient_boost.y_test <- as.integer(German_credit.te$RESPONSE)-1
Gradient_boost.X_train <- sparse.model.matrix(RESPONSE ~ .-1,
data = German_Credit.tr.subs )
Gradient_boost.X_test <- sparse.model.matrix(RESPONSE ~ .-1,
data = German_credit.te )
xgb_train <- xgb.DMatrix(data = Gradient_boost.X_train,
label = Gradient_boost.y_train)
xgb_test <- xgb.DMatrix(data = Gradient_boost.X_test,
label = Gradient_boost.y_test)
xgb_params <- list(
booster = "gbtree",
eta = 0.01,
max_depth = 8,
gamma = 4,
subsample = 0.75,
colsample_bytree = 1,
objective = "multi:softmax",
eval_metric = "mlogloss",
num_class = 2
)
xgb_model <- xgb.train(
params = xgb_params,
data = xgb_train,
nrounds = 5000,
verbose = 1
)
xgb_model
xgb_preds <- predict(xgb_model, Gradient_boost.X_test, reshape = TRUE)
# confusion matrix
xgb_tab <- table(Obs=Gradient_boost.y_test, Pred=xgb_preds)
xgb_tab
# accuracy
(xgb_acc <- sum(diag(xgb_tab))/sum(xgb_tab))
confusionMatrix(data=as.factor(xgb_preds),
reference = as.factor(Gradient_boost.y_test))
Gradient_boost.y_train <- as.integer(German_Credit.tr.subs$RESPONSE)-1
Gradient_boost.y_test <- as.integer(German_credit.te$RESPONSE)-1
Gradient_boost.X_train <- sparse.model.matrix(RESPONSE ~ .-1,
data = German_Credit.tr.subs )
Gradient_boost.X_test <- sparse.model.matrix(RESPONSE ~ .-1,
data = German_credit.te )
set.seend(123)
set.send(123)
set.seed(123)
xgb_train <- xgb.DMatrix(data = Gradient_boost.X_train,
label = Gradient_boost.y_train)
xgb_test <- xgb.DMatrix(data = Gradient_boost.X_test,
label = Gradient_boost.y_test)
xgb_params <- list(
booster = "gbtree",
eta = 0.01,
max_depth = 8,
gamma = 4,
subsample = 0.75,
colsample_bytree = 1,
objective = "multi:softmax",
eval_metric = "mlogloss",
num_class = 2
)
xgb_model <- xgb.train(
params = xgb_params,
data = xgb_train,
nrounds = 5000,
verbose = 1
)
xgb_model
xgb_preds <- predict(xgb_model, Gradient_boost.X_test, reshape = TRUE)
# confusion matrix
xgb_tab <- table(Obs=Gradient_boost.y_test, Pred=xgb_preds)
xgb_tab
# accuracy
(xgb_acc <- sum(diag(xgb_tab))/sum(xgb_tab))
confusionMatrix(data=as.factor(xgb_preds),
reference = as.factor(Gradient_boost.y_test))
summary(xgb_model)
xgb_model$call
xgb_model$params
xgb_model$feature_names
xgb_model$nfeatures
